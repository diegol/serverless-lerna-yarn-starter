#service: serverless-typescript-starter
service: hey-yabble

# Create an optimized package for our functions
package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'local'}
  profile: customerSandbox
  tracing: true
  logRetentionInDays: 14
  region: ap-southeast-1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
    - Effect: "Allow" # xray permissions (required)
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    AWS_XRAY_LOG_LEVEL: silent
    #OPEN_AI_BUCKET: ${self:custom.environment.openAiBucket}
    OPEN_AI_BUCKET: ${self:custom.environment.${self:provider.stage}.openAiBucket}
    INTERNAL_BUCKET: "hey-yabble-dev-internal-bucket"
    #ACCESS_KEY_ID: ${self:custom.environment.accessKeyId}
    #SECRET_ACCESS_KEY: ${self:custom.environment.secretAccessKey}
    #SECURE_TEST: ${self:custom.environment.${self:provider.stage}.secureTest}

    ENV: ${self:provider.stage}
functions:
  responseProcesor:
    handler: handler.responseProcesor
    timeout: 900
  summary:
    handler: handler.summary
    timeout: 900
    # layers:
    #   - arn:aws:lambda:us-east-1:580247275435:layer:LambdaInsightsExtension:14
    events:
      - http:
          path: openapi/summary
          method: get
custom:
  environment: ${file(./config/environment.yml)}
  bundle:
    externals:
      - class-transformer
      - "@nestjs/microservices"
      - "cache-manager"
      - "@nestjs/microservices/microservices-module"
      - "@nestjs/websockets/socket-module"
    packager: yarn
    linting: false
    stats: true
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: true # optional - start LocalStack in Docker on Serverless deploy
    lambda:
      # Enable this flag to improve performance
      mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
resources: # CloudFormation template syntax from here on.
  Resources:
    openAIresponseProcesorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: openAIResponseProcesor
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-bundle
  - serverless-plugin-tracing
